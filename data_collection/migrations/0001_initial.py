# Generated by Django 5.2.2 on 2025-06-07 17:15

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='League',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('country', models.CharField(max_length=50)),
            ],
        ),
        migrations.CreateModel(
            name='Season',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=20)),
                ('start_date', models.DateField()),
                ('end_date', models.DateField()),
            ],
        ),
        migrations.CreateModel(
            name='Team',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('country', models.CharField(max_length=50)),
            ],
        ),
        migrations.CreateModel(
            name='Match',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateTimeField()),
                ('venue', models.CharField(max_length=100)),
                ('attendance', models.IntegerField(null=True)),
                ('home_score', models.PositiveSmallIntegerField(null=True)),
                ('away_score', models.PositiveSmallIntegerField(null=True)),
                ('league', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='data_collection.league')),
                ('season', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='data_collection.season')),
                ('away_team', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='away_matches', to='data_collection.team')),
                ('home_team', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='home_matches', to='data_collection.team')),
            ],
        ),
        migrations.CreateModel(
            name='Prediction',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('predicted_result', models.CharField(max_length=10)),
                ('predicted_home_score', models.FloatField()),
                ('predicted_away_score', models.FloatField()),
                ('model_name', models.CharField(max_length=100)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('match', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='data_collection.match')),
            ],
        ),
        migrations.CreateModel(
            name='Player',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('position', models.CharField(max_length=20)),
                ('birth_date', models.DateField()),
                ('nationality', models.CharField(max_length=50)),
                ('team', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='data_collection.team')),
            ],
        ),
        migrations.CreateModel(
            name='MatchTeamStat',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_home', models.BooleanField()),
                ('expected_goals', models.FloatField(null=True)),
                ('expected_goals_against', models.FloatField(null=True)),
                ('possession', models.FloatField(null=True)),
                ('passing_accuracy', models.FloatField(null=True)),
                ('shots_on_target', models.PositiveSmallIntegerField(null=True)),
                ('saves', models.PositiveSmallIntegerField(null=True)),
                ('fouls', models.PositiveSmallIntegerField(null=True)),
                ('corners', models.PositiveSmallIntegerField(null=True)),
                ('crosses', models.PositiveSmallIntegerField(null=True)),
                ('touches', models.PositiveIntegerField(null=True)),
                ('tackles', models.PositiveSmallIntegerField(null=True)),
                ('aerials_won', models.PositiveSmallIntegerField(null=True)),
                ('clearances', models.PositiveSmallIntegerField(null=True)),
                ('offsides', models.PositiveSmallIntegerField(null=True)),
                ('goal_kicks', models.PositiveSmallIntegerField(null=True)),
                ('throwins', models.PositiveSmallIntegerField(null=True)),
                ('long_balls', models.PositiveSmallIntegerField(null=True)),
                ('match', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='data_collection.match')),
                ('team', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='data_collection.team')),
            ],
        ),
        migrations.CreateModel(
            name='MatchShot',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('minute', models.PositiveSmallIntegerField(null=True)),
                ('expected_goals', models.FloatField(null=True)),
                ('post_shot_expected_goals', models.FloatField(null=True)),
                ('outcome', models.CharField(blank=True, max_length=50, null=True)),
                ('distance', models.FloatField(help_text='Distance in meters', null=True)),
                ('body_part', models.CharField(blank=True, max_length=50, null=True)),
                ('is_penalty', models.BooleanField(default=False)),
                ('match', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='data_collection.match')),
                ('assisted_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='assists', to='data_collection.player')),
                ('player', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='data_collection.player')),
                ('team', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='data_collection.team')),
            ],
        ),
        migrations.CreateModel(
            name='MatchPlayerStat',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('minutes_played', models.PositiveSmallIntegerField(null=True)),
                ('goals', models.PositiveSmallIntegerField(null=True)),
                ('expected_goals', models.FloatField(null=True)),
                ('assists', models.PositiveSmallIntegerField(null=True)),
                ('expected_assists', models.FloatField(null=True)),
                ('non_penalty_expected_goals', models.FloatField(null=True)),
                ('penalty_kicks_made', models.PositiveSmallIntegerField(null=True)),
                ('penalty_kicks_attempted', models.PositiveSmallIntegerField(null=True)),
                ('shot_creation_actions', models.PositiveSmallIntegerField(null=True)),
                ('goal_creation_actions', models.PositiveSmallIntegerField(null=True)),
                ('shots', models.PositiveSmallIntegerField(null=True)),
                ('shots_on_target', models.PositiveSmallIntegerField(null=True)),
                ('passes_completed', models.PositiveSmallIntegerField(null=True)),
                ('passes_attempted', models.PositiveSmallIntegerField(null=True)),
                ('pass_completion_percentage', models.FloatField(null=True)),
                ('total_passing_distance', models.PositiveIntegerField(null=True)),
                ('progressive_passes', models.PositiveSmallIntegerField(null=True)),
                ('total_progressive_distance', models.PositiveIntegerField(null=True)),
                ('short_passes_completed', models.PositiveSmallIntegerField(null=True)),
                ('short_passes_attempted', models.PositiveSmallIntegerField(null=True)),
                ('short_passes_percentage', models.FloatField(null=True)),
                ('medium_passes_completed', models.PositiveSmallIntegerField(null=True)),
                ('medium_passes_attempted', models.PositiveSmallIntegerField(null=True)),
                ('medium_passes_percentage', models.FloatField(null=True)),
                ('long_passes_completed', models.PositiveSmallIntegerField(null=True)),
                ('long_passes_attempted', models.PositiveSmallIntegerField(null=True)),
                ('long_passes_percentage', models.FloatField(null=True)),
                ('key_passes', models.PositiveSmallIntegerField(null=True)),
                ('passes_into_final_third', models.PositiveSmallIntegerField(null=True)),
                ('passes_into_penalty_area', models.PositiveSmallIntegerField(null=True)),
                ('crosses_into_penalty_area', models.PositiveSmallIntegerField(null=True)),
                ('live_passes', models.PositiveSmallIntegerField(null=True)),
                ('dead_passes', models.PositiveSmallIntegerField(null=True)),
                ('free_kicks', models.PositiveSmallIntegerField(null=True)),
                ('through_balls', models.PositiveSmallIntegerField(null=True)),
                ('switches', models.PositiveSmallIntegerField(null=True)),
                ('crosses', models.PositiveSmallIntegerField(null=True)),
                ('throwins', models.PositiveSmallIntegerField(null=True)),
                ('corners', models.PositiveSmallIntegerField(null=True)),
                ('inswinging_corner_kicks', models.PositiveSmallIntegerField(null=True)),
                ('outswinging_corner_kicks', models.PositiveSmallIntegerField(null=True)),
                ('straight_corner_kicks', models.PositiveSmallIntegerField(null=True)),
                ('tackles', models.PositiveSmallIntegerField(null=True)),
                ('tackles_won', models.PositiveSmallIntegerField(null=True)),
                ('tackles_in_defensive_third', models.PositiveSmallIntegerField(null=True)),
                ('tackles_in_middle_third', models.PositiveSmallIntegerField(null=True)),
                ('tackles_in_attacking_third', models.PositiveSmallIntegerField(null=True)),
                ('dribblers_tackled', models.PositiveSmallIntegerField(null=True)),
                ('dribbles_challenged', models.PositiveSmallIntegerField(null=True)),
                ('dribble_tackle_percent', models.FloatField(null=True)),
                ('blocks', models.PositiveSmallIntegerField(null=True)),
                ('shots_blocked', models.PositiveSmallIntegerField(null=True)),
                ('passes_blocked', models.PositiveSmallIntegerField(null=True)),
                ('interceptions', models.PositiveSmallIntegerField(null=True)),
                ('tackles_and_interceptions', models.PositiveSmallIntegerField(null=True)),
                ('clearances', models.PositiveSmallIntegerField(null=True)),
                ('errors', models.PositiveSmallIntegerField(null=True)),
                ('touches', models.PositiveIntegerField(null=True)),
                ('touches_in_defensive_penalty', models.PositiveSmallIntegerField(null=True)),
                ('touches_in_defensive_third', models.PositiveSmallIntegerField(null=True)),
                ('touches_in_middle_third', models.PositiveSmallIntegerField(null=True)),
                ('touches_in_attacking_third', models.PositiveSmallIntegerField(null=True)),
                ('touches_in_attacking_penalty', models.PositiveSmallIntegerField(null=True)),
                ('attempted_take_ons', models.PositiveSmallIntegerField(null=True)),
                ('successful_take_ons', models.PositiveSmallIntegerField(null=True)),
                ('successful_take_on_percentage', models.FloatField(null=True)),
                ('take_ons_tackled', models.PositiveSmallIntegerField(null=True)),
                ('take_ons_tackled_percentage', models.FloatField(null=True)),
                ('carries', models.PositiveSmallIntegerField(null=True)),
                ('progressive_carries', models.PositiveSmallIntegerField(null=True)),
                ('total_distance_carried', models.PositiveIntegerField(null=True)),
                ('total_progressive_distance_carried', models.PositiveIntegerField(null=True)),
                ('carries_into_attacking_third', models.PositiveSmallIntegerField(null=True)),
                ('carries_into_penalty_area', models.PositiveSmallIntegerField(null=True)),
                ('miscontrols', models.PositiveSmallIntegerField(null=True)),
                ('disposessions', models.PositiveSmallIntegerField(null=True)),
                ('passes_recieved', models.PositiveSmallIntegerField(null=True)),
                ('progressive_passes_recieved', models.PositiveSmallIntegerField(null=True)),
                ('yellow_cards', models.PositiveSmallIntegerField(null=True)),
                ('red_cards', models.PositiveSmallIntegerField(null=True)),
                ('second_yellow_cards', models.PositiveSmallIntegerField(null=True)),
                ('fouls', models.PositiveSmallIntegerField(null=True)),
                ('fouls_drawn', models.PositiveSmallIntegerField(null=True)),
                ('offsides', models.PositiveSmallIntegerField(null=True)),
                ('penalty_kicks_won', models.PositiveSmallIntegerField(null=True)),
                ('penalty_kicks_conceeded', models.PositiveSmallIntegerField(null=True)),
                ('own_goals', models.PositiveSmallIntegerField(null=True)),
                ('balls_recovered', models.PositiveSmallIntegerField(null=True)),
                ('aerials_won', models.PositiveSmallIntegerField(null=True)),
                ('aerials_lost', models.PositiveSmallIntegerField(null=True)),
                ('aerial_win_percentage', models.FloatField(null=True)),
                ('gk_shots_on_targets', models.PositiveSmallIntegerField(null=True)),
                ('gk_goals_against', models.PositiveSmallIntegerField(null=True)),
                ('gk_saves', models.PositiveSmallIntegerField(null=True)),
                ('gk_save_percentage', models.FloatField(null=True)),
                ('gk_post_shot_expected_goals', models.FloatField(null=True)),
                ('gk_launches_completed', models.PositiveSmallIntegerField(null=True)),
                ('gk_launches_attempted', models.PositiveSmallIntegerField(null=True)),
                ('gk_launches_completion_percentage', models.FloatField(null=True)),
                ('gk_passes_attempted', models.PositiveSmallIntegerField(null=True)),
                ('gk_thows_attempted', models.PositiveSmallIntegerField(null=True)),
                ('gk_launch_percent', models.FloatField(null=True)),
                ('gk_average_pass_length', models.FloatField(null=True)),
                ('gk_goal_kicks_attempted', models.PositiveSmallIntegerField(null=True)),
                ('gk_goal_kick_launch_percent', models.FloatField(null=True)),
                ('gk_goak_kick_average_length', models.FloatField(null=True)),
                ('gk_crosses_opposed', models.PositiveSmallIntegerField(null=True)),
                ('gk_crosses_stopped', models.PositiveSmallIntegerField(null=True)),
                ('gk_cross_stop_percentage', models.FloatField(null=True)),
                ('gk_actions_outside_penalty_area', models.PositiveSmallIntegerField(null=True)),
                ('gk_average_distance_from_goal', models.FloatField(null=True)),
                ('match', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='data_collection.match')),
                ('player', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='data_collection.player')),
                ('team', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='data_collection.team')),
            ],
        ),
        migrations.CreateModel(
            name='TeamSeason',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('league', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='data_collection.league')),
                ('season', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='data_collection.season')),
                ('team', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='data_collection.team')),
            ],
        ),
    ]
